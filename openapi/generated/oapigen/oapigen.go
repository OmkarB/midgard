// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package oapigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusPending ActionStatus = "pending"

	ActionStatusSuccess ActionStatus = "success"
)

// Defines values for ActionType.
const (
	ActionTypeAddLiquidity ActionType = "addLiquidity"

	ActionTypeDonate ActionType = "donate"

	ActionTypeRefund ActionType = "refund"

	ActionTypeSwap ActionType = "swap"

	ActionTypeSwitch ActionType = "switch"

	ActionTypeWithdraw ActionType = "withdraw"
)

// action details among with related transactions
type Action struct {

	// Int64, nano timestamp of the block at which the action was registered
	Date string `json:"date"`

	// Int64, height of the block at which the action was registered
	Height string `json:"height"`

	// Inbound transactions related to the action
	In       []Transaction `json:"in"`
	Metadata Metadata      `json:"metadata"`

	// Outbound transactions related to the action
	Out []Transaction `json:"out"`

	// Pools involved in the action
	Pools []string `json:"pools"`

	// Indicates if the action is completed or if related outbound transactions are still
	// pending.
	Status ActionStatus `json:"status"`

	// Type of action
	Type ActionType `json:"type"`
}

// Indicates if the action is completed or if related outbound transactions are still
// pending.
type ActionStatus string

// Type of action
type ActionType string

// AddLiquidityMetadata defines model for AddLiquidityMetadata.
type AddLiquidityMetadata struct {

	// Int64, amount of liquidity units assigned to the member as result of the liquidity
	// deposit
	LiquidityUnits string `json:"liquidityUnits"`
}

// Balance defines model for Balance.
type Balance struct {
	Coins Coins `json:"coins"`
}

// BlockRewards defines model for BlockRewards.
type BlockRewards struct {
	BlockReward string `json:"blockReward"`
	BondReward  string `json:"bondReward"`
	PoolReward  string `json:"poolReward"`
}

// BondMetrics defines model for BondMetrics.
type BondMetrics struct {

	// Int64(e8), Average bond of active nodes
	AverageActiveBond string `json:"averageActiveBond"`

	// Int64(e8), Average bond of standby nodes
	AverageStandbyBond string `json:"averageStandbyBond"`

	// Int64(e8), Maxinum bond of active nodes
	MaximumActiveBond string `json:"maximumActiveBond"`

	// Int64(e8), Maximum bond of standby nodes
	MaximumStandbyBond string `json:"maximumStandbyBond"`

	// Int64(e8), Median bond of active nodes
	MedianActiveBond string `json:"medianActiveBond"`

	// Int64(e8), Median bond of standby nodes
	MedianStandbyBond string `json:"medianStandbyBond"`

	// Int64(e8), Minumum bond of active nodes
	MinimumActiveBond string `json:"minimumActiveBond"`

	// Int64(e8), Minumum bond of standby nodes
	MinimumStandbyBond string `json:"minimumStandbyBond"`

	// Int64(e8), Total bond of active nodes
	TotalActiveBond string `json:"totalActiveBond"`

	// Int64(e8), Total bond of standby nodes
	TotalStandbyBond string `json:"totalStandbyBond"`
}

// BoolConstants defines model for BoolConstants.
type BoolConstants struct {
	StrictBondLiquidityRatio bool `json:"StrictBondLiquidityRatio"`
}

// Represents a digital currency amount
type Coin struct {

	// Int64(e8), asset Amount.
	Amount string `json:"amount"`

	// Asset in CHAIN.SYMBOL format
	Asset string `json:"asset"`
}

// Coins defines model for Coins.
type Coins []Coin

// Constants defines model for Constants.
type Constants struct {
	BoolValues   BoolConstants   `json:"bool_values"`
	Int64Values  Int64Constants  `json:"int_64_values"`
	StringValues StringConstants `json:"string_values"`
}

// DepthHistory defines model for DepthHistory.
type DepthHistory struct {
	Intervals DepthHistoryIntervals `json:"intervals"`
	Meta      DepthHistoryMeta      `json:"meta"`
}

// DepthHistoryIntervals defines model for DepthHistoryIntervals.
type DepthHistoryIntervals []DepthHistoryItem

// DepthHistoryItem defines model for DepthHistoryItem.
type DepthHistoryItem struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64, Liquidity Units in the pool at the end of the interval
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, The liquidity unit value index. Sqrt(assetDepth * runeDepth)/liquidity units
	Luvi string `json:"luvi"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval
	RuneDepth string `json:"runeDepth"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64, Synth supply in the pool at the end of the interval
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool at the end of the interval
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool at the end of the interval
	Units string `json:"units"`
}

// DepthHistoryMeta defines model for DepthHistoryMeta.
type DepthHistoryMeta struct {

	// Int64(e8), the amount of Asset in the pool at the end of the interval at time endTime
	EndAssetDepth string `json:"endAssetDepth"`

	// Int64, Liquidity Units in the pool at the end of the interval at time endTime
	EndLPUnits string `json:"endLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the end of the interval at time endTime
	EndRuneDepth string `json:"endRuneDepth"`

	// Int64, Synth Units in the pool at the end of the interval at time endTime
	EndSynthUnits string `json:"endSynthUnits"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, The liquidity unit value index increase between the first and last depth item
	LuviIncrease string `json:"luviIncrease"`

	// Float, The impermanent loss between the first and last depth item
	PriceShiftLoss string `json:"priceShiftLoss"`

	// Int64(e8), the amount of Asset in the pool at the start of the interval at time
	// startTime
	StartAssetDepth string `json:"startAssetDepth"`

	// Int64, Liquidity Units in the pool at the start of the interval at time startTime
	StartLPUnits string `json:"startLPUnits"`

	// Int64(e8), the amount of Rune in the pool at the start of the interval at time startTime
	StartRuneDepth string `json:"startRuneDepth"`

	// Int64, Synth Units in the pool at the start of the interval at time startTime
	StartSynthUnits string `json:"startSynthUnits"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`
}

// EarningsHistory defines model for EarningsHistory.
type EarningsHistory struct {
	Intervals EarningsHistoryIntervals `json:"intervals"`
	Meta      EarningsHistoryItem      `json:"meta"`
}

// EarningsHistoryIntervals defines model for EarningsHistoryIntervals.
type EarningsHistoryIntervals []EarningsHistoryItem

// EarningsHistoryItem defines model for EarningsHistoryItem.
type EarningsHistoryItem struct {

	// float64, Average amount of active nodes during the time interval
	AvgNodeCount string `json:"avgNodeCount"`

	// Int64(e8), Total block rewards emitted during the time interval
	BlockRewards string `json:"blockRewards"`

	// Int64(e8), Share of earnings sent to nodes during the time interval
	BondingEarnings string `json:"bondingEarnings"`

	// Int64(e8), System income generated during the time interval. It is the sum of
	// liquidity fees and block rewards
	Earnings string `json:"earnings"`

	// Int64, The end time of interval in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), Share of earnings sent to pools during the time interval
	LiquidityEarnings string `json:"liquidityEarnings"`

	// Int64(e8), Total liquidity fees, converted to RUNE, collected during the time interval
	LiquidityFees string `json:"liquidityFees"`

	// Earnings data for each pool for the time interval
	Pools []EarningsHistoryItemPool `json:"pools"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of interval in unix timestamp
	StartTime string `json:"startTime"`
}

// pool earnings data during the time interval
type EarningsHistoryItemPool struct {

	// Int64(e8), liquidity fees collected in the pool's asset
	AssetLiquidityFees string `json:"assetLiquidityFees"`

	// Int64(e8), total earnings in RUNE (totalLiquidityFees + rewards)
	Earnings string `json:"earnings"`

	// asset for the given pool
	Pool string `json:"pool"`

	// Int64(e8), RUNE amount sent to (positive) or taken from (negative) the pool as
	// a result of balancing it's share of system income each block
	Rewards string `json:"rewards"`

	// Int64(e8), liquidity fees collected in RUNE
	RuneLiquidityFees string `json:"runeLiquidityFees"`

	// Int64(e8), total liquidity fees (assetFees + runeFees) collected, shown in RUNE
	TotalLiquidityFeesRune string `json:"totalLiquidityFeesRune"`
}

// Health defines model for Health.
type Health struct {

	// True means healthy, connected to database
	Database bool `json:"database"`

	// True means healthy. False means Midgard is still catching up to the chain
	InSync         bool     `json:"inSync"`
	LastAggregated HeightTS `json:"lastAggregated"`
	LastCommitted  HeightTS `json:"lastCommitted"`
	LastFetched    HeightTS `json:"lastFetched"`
	LastThorNode   HeightTS `json:"lastThorNode"`

	// Int64, the current block count
	ScannerHeight string `json:"scannerHeight"`
}

// HeightTS defines model for HeightTS.
type HeightTS struct {

	// Block height
	Height int `json:"height"`

	// Block timestamp (seconds since epoch)
	Timestamp int `json:"timestamp"`
}

// InboundAddresses defines model for InboundAddresses.
type InboundAddresses []InboundAddressesItem

// InboundAddressesItem defines model for InboundAddressesItem.
type InboundAddressesItem struct {
	Address string  `json:"address"`
	Chain   string  `json:"chain"`
	GasRate *string `json:"gas_rate,omitempty"`

	// indicate whether this chain has halted
	Halted bool    `json:"halted"`
	PubKey string  `json:"pub_key"`
	Router *string `json:"router,omitempty"`
}

// Int64Constants defines model for Int64Constants.
type Int64Constants struct {
	AsgardSize                    int64  `json:"AsgardSize"`
	BadValidatorRate              int64  `json:"BadValidatorRate"`
	BadValidatorRedline           int    `json:"BadValidatorRedline"`
	BlocksPerYear                 int64  `json:"BlocksPerYear"`
	ChurnInterval                 int64  `json:"ChurnInterval"`
	ChurnRetryInterval            int64  `json:"ChurnRetryInterval"`
	DesiredValidatorSet           int64  `json:"DesiredValidatorSet"`
	DoubleSignMaxAge              int64  `json:"DoubleSignMaxAge"`
	EmissionCurve                 int64  `json:"EmissionCurve"`
	FailKeygenSlashPoints         int64  `json:"FailKeygenSlashPoints"`
	FailKeysignSlashPoints        int64  `json:"FailKeysignSlashPoints"`
	FullImpLossProtectionBlocks   int64  `json:"FullImpLossProtectionBlocks"`
	FundMigrationInterval         int64  `json:"FundMigrationInterval"`
	IncentiveCurve                int64  `json:"IncentiveCurve"`
	JailTimeKeygen                int64  `json:"JailTimeKeygen"`
	JailTimeKeysign               int64  `json:"JailTimeKeysign"`
	LackOfObservationPenalty      int64  `json:"LackOfObservationPenalty"`
	LiquidityLockUpBlocks         int64  `json:"LiquidityLockUpBlocks"`
	MaxAvailablePools             int64  `json:"MaxAvailablePools"`
	MaxSwapsPerBlock              int64  `json:"MaxSwapsPerBlock"`
	MinRunePoolDepth              int64  `json:"MinRunePoolDepth"`
	MinSlashPointsForBadValidator int64  `json:"MinSlashPointsForBadValidator"`
	MinSwapsPerBlock              int64  `json:"MinSwapsPerBlock"`
	MinimumBondInRune             int64  `json:"MinimumBondInRune"`
	MinimumNodesForBFT            int64  `json:"MinimumNodesForBFT"`
	MinimumNodesForYggdrasil      int64  `json:"MinimumNodesForYggdrasil"`
	NativeTransactionFee          int64  `json:"NativeTransactionFee"`
	NewPoolCycle                  *int64 `json:"NewPoolCycle,omitempty"`
	ObservationDelayFlexibility   int64  `json:"ObservationDelayFlexibility"`
	ObserveSlashPoints            int64  `json:"ObserveSlashPoints"`
	OldValidatorRate              int64  `json:"OldValidatorRate"`
	OutboundTransactionFee        int64  `json:"OutboundTransactionFee"`
	PoolCycle                     int64  `json:"PoolCycle"`
	SigningTransactionPeriod      int64  `json:"SigningTransactionPeriod"`
	VirtualMultSynths             int64  `json:"VirtualMultSynths"`
	YggFundLimit                  int64  `json:"YggFundLimit"`
}

// Lastblock defines model for Lastblock.
type Lastblock []LastblockItem

// LastblockItem defines model for LastblockItem.
type LastblockItem struct {
	Chain          string `json:"chain"`
	LastObservedIn int64  `json:"last_observed_in"`
	LastSignedOut  int64  `json:"last_signed_out"`
	Thorchain      int64  `json:"thorchain"`
}

// LiquidityHistory defines model for LiquidityHistory.
type LiquidityHistory struct {
	Intervals LiquidityHistoryIntervals `json:"intervals"`
	Meta      LiquidityHistoryItem      `json:"meta"`
}

// LiquidityHistoryIntervals defines model for LiquidityHistoryIntervals.
type LiquidityHistoryIntervals []LiquidityHistoryItem

// LiquidityHistoryItem defines model for LiquidityHistoryItem.
type LiquidityHistoryItem struct {

	// Int64(e8), total assets deposited during the time interval.
	// Denoted in Rune using the price at deposit time.
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, number of deposits during the time interval.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of rune and asset deposits.
	// Denoted in Rune (using the price at deposit time).
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), total Rune deposited during the time interval.
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64(e8), net liquidity changes (withdrawals - deposits) during the time interval
	Net string `json:"net"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), total assets withdrawn during the time interval.
	// Denoted in Rune using the price at withdraw time.
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, number of withdraw during the time interval.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total Rune withdrawn during the time interval.
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), total of rune and asset withdrawals.
	// Denoted in Rune (using the price at withdraw time).
	WithdrawVolume string `json:"withdrawVolume"`
}

// MemberDetails defines model for MemberDetails.
type MemberDetails struct {

	// List details of all the liquidity providers identified with the given address
	Pools []MemberPool `json:"pools"`
}

// MemberPool defines model for MemberPool.
type MemberPool struct {

	// Int64(e8), total asset added to the pool by member
	AssetAdded string `json:"assetAdded"`

	// asset address used by the member
	AssetAddress string `json:"assetAddress"`

	// Int64(e8), asset sent but not added yet, it will be added when the rune pair arrives
	AssetPending string `json:"assetPending"`

	// Int64(e8), total asset withdrawn from the pool by member
	AssetWithdrawn string `json:"assetWithdrawn"`

	// Int64, Unix timestamp for the first time member deposited into the pool
	DateFirstAdded string `json:"dateFirstAdded"`

	// Int64, Unix timestamp for the last time member deposited into the pool
	DateLastAdded string `json:"dateLastAdded"`

	// Int64, pool liquidity units that belong the the member
	LiquidityUnits string `json:"liquidityUnits"`

	// Pool rest of the data refers to
	Pool string `json:"pool"`

	// Int64(e8), total Rune added to the pool by member
	RuneAdded string `json:"runeAdded"`

	// Rune address used by the member
	RuneAddress string `json:"runeAddress"`

	// Int64(e8), Rune sent but not added yet, it will be added when the asset pair arrives
	RunePending string `json:"runePending"`

	// Int64(e8), total Rune withdrawn from the pool by member
	RuneWithdrawn string `json:"runeWithdrawn"`
}

// Members defines model for Members.
type Members []string

// Metadata defines model for Metadata.
type Metadata struct {
	AddLiquidity *AddLiquidityMetadata `json:"addLiquidity,omitempty"`
	Refund       *RefundMetadata       `json:"refund,omitempty"`
	Swap         *SwapMetadata         `json:"swap,omitempty"`
	Withdraw     *WithdrawMetadata     `json:"withdraw,omitempty"`
}

// Network defines model for Network.
type Network struct {

	// Array of rune amounts (e8) bonded by each active node.
	ActiveBonds []string `json:"activeBonds"`

	// Int64, Number of active nodes
	ActiveNodeCount string       `json:"activeNodeCount"`
	BlockRewards    BlockRewards `json:"blockRewards"`
	BondMetrics     BondMetrics  `json:"bondMetrics"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded bonding earnings based on the current
	// reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyBondIncome/BondAmount + 1)^52 - 1
	BondingAPY string `json:"bondingAPY"`

	// Float, E.g. 0.01 = 1%. Estimate of the compounded  liquidity provider earnings based
	// on the current reserve size, emmission curve, blocks per year and pool share factor =
	// (WeeklyLiquidityIncome/(totalPooledRune*2) + 1)^52 - 1
	LiquidityAPY string `json:"liquidityAPY"`

	// Int64, height (block number) of the next churn.
	NextChurnHeight string `json:"nextChurnHeight"`

	// Int64, the remaining time of pool activation (in blocks)
	PoolActivationCountdown string `json:"poolActivationCountdown"`

	// Float [0..1], the ratio which is used to split earnings between liquidity provider and
	// nodes.
	// LPIncome = rewards * poolShareFactor ;
	// BondIncome :=  rewards * (1 - poolShareFactor)
	PoolShareFactor string `json:"poolShareFactor"`

	// Array of rune amounts (e8) bonded by each standby node.
	StandbyBonds []string `json:"standbyBonds"`

	// Int64, Number of standby nodes, some of them might become active at the next churn.
	StandbyNodeCount string `json:"standbyNodeCount"`

	// Int64(e8), total Rune in all pools. Because asset and Rune value is the same amount in
	// every pool (by definition), the total amount pooled is totalPooledRune*2.
	TotalPooledRune string `json:"totalPooledRune"`

	// Int64(e8), Current size of the Reserve.
	TotalReserve string `json:"totalReserve"`
}

// List of network fees associated to an action. One network fee is charged for each
// outbound transaction
type NetworkFees []Coin

// Node defines model for Node.
type Node struct {

	// ed25519 public key
	Ed25519 string `json:"ed25519"`

	// node thorchain address
	NodeAddress string `json:"nodeAddress"`

	// secp256k1 public key
	Secp256k1 string `json:"secp256k1"`
}

// Nodes defines model for Nodes.
type Nodes []Node

// ObservedChain defines model for ObservedChain.
type ObservedChain struct {
	Chain  string `json:"chain"`
	Height int    `json:"height"`
}

// PoolDetail defines model for PoolDetail.
type PoolDetail struct {
	Asset string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool.
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount.
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Int64, Liquidity Units in the pool.
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool.
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged.
	Status string `json:"status"`

	// Int64, Synth supply in the pool.
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool.
	SynthUnits string `json:"synthUnits"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool.
	Units string `json:"units"`

	// Int64(e8), the total volume of swaps in the last 24h to and from Rune denoted in Rune.
	// It includes synth mint or burn.
	Volume24h string `json:"volume24h"`
}

// PoolDetails defines model for PoolDetails.
type PoolDetails []PoolDetail

// PoolStatsDetail defines model for PoolStatsDetail.
type PoolStatsDetail struct {

	// Int64(e8), same as history/liquidity_changes:addAssetLiquidityVolume
	AddAssetLiquidityVolume string `json:"addAssetLiquidityVolume"`

	// Int64, same as history/liquidity_changes:addLiquidityCount
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), same as history/liquidity_changes:addLiquidityVolume
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Int64(e8), same as history/liquidity_changes:addRuneLiquidityVolume
	AddRuneLiquidityVolume string `json:"addRuneLiquidityVolume"`
	Asset                  string `json:"asset"`

	// Int64(e8), the amount of Asset in the pool
	AssetDepth string `json:"assetDepth"`

	// Float, price of asset in rune. I.e. rune amount / asset amount
	AssetPrice string `json:"assetPrice"`

	// Float, the price of asset in USD (based on the deepest USD pool).
	AssetPriceUSD string `json:"assetPriceUSD"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as history/swaps:averageSlip
	AverageSlip string `json:"averageSlip"`

	// Int64(e8), part of the withdrawRuneVolume which was payed because of impermanent loss
	// protection.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Int64, Liquidity Units in the pool
	LiquidityUnits string `json:"liquidityUnits"`

	// Float, Average Percentage Yield: annual return estimated using last weeks income,
	// taking compound interest into account.
	PoolAPY string `json:"poolAPY"`

	// Int64(e8), the amount of Rune in the pool
	RuneDepth string `json:"runeDepth"`

	// The state of the pool, e.g. Available, Staged
	Status string `json:"status"`

	// Int64, same as history/swaps:totalCount
	SwapCount string `json:"swapCount"`

	// Int64(e8), same as history/swaps:totalVolume
	SwapVolume string `json:"swapVolume"`

	// Int64, Synth supply in the pool
	SynthSupply string `json:"synthSupply"`

	// Int64, Synth Units in the pool
	SynthUnits string `json:"synthUnits"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toAssetAverageSlip
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, same as history/swaps:toAssetCount
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), same as history/swaps:toAssetFees
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), same as history/swaps:toAssetVolume
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), same as
	// history/swaps:toRuneAverageSlip
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, same as history/swaps:toRuneCount
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), same as history/swaps:toRuneFees
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), same as history/swaps:toRuneVolume
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64(e8), same as history/swaps:totalFees
	TotalFees string `json:"totalFees"`

	// Int64, same as len(history/members?pool=POOL)
	UniqueMemberCount string `json:"uniqueMemberCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, Total Units (synthUnits + liquidityUnits) in the pool
	Units string `json:"units"`

	// Int64(e8), same as history/liquidity_changes:withdrawAssetVolume
	WithdrawAssetVolume string `json:"withdrawAssetVolume"`

	// Int64, same as history/liquidity_changes:withdrawCount
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), same as history/liquidity_changes:withdrawRuneVolume
	WithdrawRuneVolume string `json:"withdrawRuneVolume"`

	// Int64(e8), same as history/liquidity_changes:withdrawVolume
	WithdrawVolume string `json:"withdrawVolume"`
}

// PreflightStatus defines model for PreflightStatus.
type PreflightStatus struct {
	Code   int    `json:"code"`
	Reason string `json:"reason"`
	Status string `json:"status"`
}

// ProxiedNode defines model for ProxiedNode.
type ProxiedNode struct {
	ActiveBlockHeight int    `json:"active_block_height"`
	Bond              string `json:"bond"`
	BondAddress       string `json:"bond_address"`
	CurrentAward      string `json:"current_award"`
	ForcedToLeave     bool   `json:"forced_to_leave"`
	IpAddress         string `json:"ip_address"`
	Jail              struct {
		NodeAddress *string `json:"node_address,omitempty"`
	} `json:"jail"`
	LeaveHeight     int             `json:"leave_height"`
	NodeAddress     string          `json:"node_address"`
	ObserveChains   []ObservedChain `json:"observe_chains"`
	PreflightStatus PreflightStatus `json:"preflight_status"`
	PubKeySet       struct {
		Ed25519   string `json:"ed25519"`
		Secp256k1 string `json:"secp256k1"`
	} `json:"pub_key_set"`
	RequestedToLeave    bool     `json:"requested_to_leave"`
	SignerMembership    []string `json:"signer_membership"`
	SlashPoints         int      `json:"slash_points"`
	Status              string   `json:"status"`
	StatusSince         int      `json:"status_since"`
	ValidatorConsPubKey string   `json:"validator_cons_pub_key"`
	Version             string   `json:"version"`
}

// ProxiedNodes defines model for ProxiedNodes.
type ProxiedNodes []ProxiedNode

// Queue defines model for Queue.
type Queue struct {
	Internal int `json:"internal"`
	Outbound int `json:"outbound"`
	Swap     int `json:"swap"`
}

// RefundMetadata defines model for RefundMetadata.
type RefundMetadata struct {

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Reason for the refund
	Reason string `json:"reason"`
}

// ReverseTHORNames defines model for ReverseTHORNames.
type ReverseTHORNames []string

// StatsData defines model for StatsData.
type StatsData struct {

	// Int64, number of deposits since beginning.
	AddLiquidityCount string `json:"addLiquidityCount"`

	// Int64(e8), total of deposits since beginning.
	AddLiquidityVolume string `json:"addLiquidityVolume"`

	// Deprecated, it's always 0.
	DailyActiveUsers string `json:"dailyActiveUsers"`

	// Int64(e8), impermanent loss protection paid out.
	ImpermanentLossProtectionPaid string `json:"impermanentLossProtectionPaid"`

	// Deprecated, it's always 0.
	MonthlyActiveUsers string `json:"monthlyActiveUsers"`

	// Int64(e8), current total Rune in the pools.
	RuneDepth string `json:"runeDepth"`

	// Float, the price of Rune based on the deepest USD pool.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, number of swaps (including synths) since beginning.
	SwapCount string `json:"swapCount"`

	// Int64(e8), number of swaps (including synths) in the last 24h.
	SwapCount24h string `json:"swapCount24h"`

	// Int64, number of swaps (including synths) in the last 30d.
	SwapCount30d string `json:"swapCount30d"`

	// Int64(e8), total volume of swaps (including synths) denoted in Rune since beginning.
	SwapVolume string `json:"swapVolume"`

	// Int64(e8), amount of native rune switched from erc20 or BEPSwap rune.
	SwitchedRune string `json:"switchedRune"`

	// Int64, number of swaps from Synth to Rune since beginning.
	SynthBurnCount string `json:"synthBurnCount"`

	// Int64, number of swaps from Rune to Synth since beginning.
	SynthMintCount string `json:"synthMintCount"`

	// Int64, number of swaps from Rune to Asset since beginning.
	ToAssetCount string `json:"toAssetCount"`

	// Int64, number of swaps from Asset to Rune since beginning.
	ToRuneCount string `json:"toRuneCount"`

	// Deprecated, it's always 0.
	UniqueSwapperCount string `json:"uniqueSwapperCount"`

	// Int64, number of withdraws since beginning.
	WithdrawCount string `json:"withdrawCount"`

	// Int64(e8), total of withdraws since beginning.
	WithdrawVolume string `json:"withdrawVolume"`
}

// StringConstants defines model for StringConstants.
type StringConstants struct {
	DefaultPoolStatus string `json:"DefaultPoolStatus"`
}

// SwapHistory defines model for SwapHistory.
type SwapHistory struct {
	Intervals SwapHistoryIntervals `json:"intervals"`
	Meta      SwapHistoryItem      `json:"meta"`
}

// SwapHistoryIntervals defines model for SwapHistoryIntervals.
type SwapHistoryIntervals []SwapHistoryItem

// SwapHistoryItem defines model for SwapHistoryItem.
type SwapHistoryItem struct {

	// Float64 (Basis points, 0-10000, where 10000=100%), the weighted average (by count)
	// of toAssetAverageSlip, toRuneAverageSlip, synthMintAverageSlip, synthRedeemAverageSlip.
	// Big swaps have the same weight as small swaps.
	AverageSlip string `json:"averageSlip"`

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to synthetic asset.
	// Big swaps have the same weight as small swaps
	SynthMintAverageSlip string `json:"synthMintAverageSlip"`

	// Int64, count of rune to synthetic asset swaps
	SynthMintCount string `json:"synthMintCount"`

	// Int64(e8), the fees collected from swaps from rune to synthetic asset (in rune)
	SynthMintFees string `json:"synthMintFees"`

	// Int64(e8), volume of swaps from rune to synthetic asset denoted in rune
	SynthMintVolume string `json:"synthMintVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from synthetic asset to rune.
	// Big swaps have the same weight as small swaps
	SynthRedeemAverageSlip string `json:"synthRedeemAverageSlip"`

	// Int64, count of synthetic asset to rune swaps
	SynthRedeemCount string `json:"synthRedeemCount"`

	// Int64(e8), the fees collected from swaps from synthetic asset to rune (in rune)
	SynthRedeemFees string `json:"synthRedeemFees"`

	// Int64(e8), volume of swaps from synthetic asset to rune denoted in rune
	SynthRedeemVolume string `json:"synthRedeemVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from rune to asset.
	// Big swaps have the same weight as small swaps
	ToAssetAverageSlip string `json:"toAssetAverageSlip"`

	// Int64, count of swaps from rune to asset
	ToAssetCount string `json:"toAssetCount"`

	// Int64(e8), the fees collected from swaps from rune to asset (in rune)
	ToAssetFees string `json:"toAssetFees"`

	// Int64(e8), volume of swaps from rune to asset denoted in rune
	ToAssetVolume string `json:"toAssetVolume"`

	// Float64 (Basis points, 0-10000, where 10000=100%), the average slip for swaps
	// from asset to rune.
	// Big swaps have the same weight as small swaps
	ToRuneAverageSlip string `json:"toRuneAverageSlip"`

	// Int64, count of swaps from asset to rune
	ToRuneCount string `json:"toRuneCount"`

	// Int64(e8), the fees collected from swaps from asset to rune (in rune)
	ToRuneFees string `json:"toRuneFees"`

	// Int64(e8), volume of swaps from asset to rune denoted in rune
	ToRuneVolume string `json:"toRuneVolume"`

	// Int64, toAssetCount + toRuneCount + synthMintCount + synthRedeemCount
	TotalCount string `json:"totalCount"`

	// Int64(e8), toAssetFees + toRuneFees + synthMintFees + synthRedeemFees
	TotalFees string `json:"totalFees"`

	// Int64(e8),
	// toAssetVolume + toRuneVolume + synthMintVolume + synthRedeemVolume (denoted in rune)
	TotalVolume string `json:"totalVolume"`
}

// SwapMetadata defines model for SwapMetadata.
type SwapMetadata struct {

	// Affiliate fee address of the swap, empty if fee swap
	AffiliateAddress string `json:"affiliateAddress"`

	// Int64 (Basis points, 0-1000, where 1000=10%)
	AffiliateFee string `json:"affiliateFee"`

	// Int64(e8), RUNE amount charged as swap liquidity fee
	LiquidityFee string `json:"liquidityFee"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`

	// Int64 (Basis points, 0-10000, where 10000=100%), swap slip percentage
	SwapSlip string `json:"swapSlip"`

	// Int64(e8), minimum output amount specified for the swap
	SwapTarget string `json:"swapTarget"`
}

// THORNameDetails defines model for THORNameDetails.
type THORNameDetails struct {

	// List details of all chains and their addresses for a given THORName
	Entries []THORNameEntry `json:"entries"`

	// Int64, THORChain block height in which THORName expires
	Expire string `json:"expire"`

	// owner's THOR address
	Owner string `json:"owner"`
}

// THORNameEntry defines model for THORNameEntry.
type THORNameEntry struct {

	// address on blockchain
	Address string `json:"address"`

	// blockchain
	Chain string `json:"chain"`
}

// TVLHistory defines model for TVLHistory.
type TVLHistory struct {
	Intervals TVLHistoryIntervals `json:"intervals"`
	Meta      TVLHistoryItem      `json:"meta"`
}

// TVLHistoryIntervals defines model for TVLHistoryIntervals.
type TVLHistoryIntervals []TVLHistoryItem

// TVLHistoryItem defines model for TVLHistoryItem.
type TVLHistoryItem struct {

	// Int64, The end time of bucket in unix timestamp
	EndTime string `json:"endTime"`

	// Float, the price of Rune based on the deepest USD pool at the end of the interval.
	RunePriceUSD string `json:"runePriceUSD"`

	// Int64, The beginning time of bucket in unix timestamp
	StartTime string `json:"startTime"`

	// Int64(e8), the total amount of bonds (both active and standby) at the end of
	// the interval
	TotalValueBonded *string `json:"totalValueBonded,omitempty"`

	// Int64(e8), total value locked in the chain (in rune)
	// This equals `totalPooledValue + totalBondedValue`, as it combines the liquidity
	// pools and bonds of the nodes.
	TotalValueLocked *string `json:"totalValueLocked,omitempty"`

	// Int64(e8) in rune, the total pooled value (both assets and rune) in all of the pools at
	// the end of the interval.
	// Note: this is twice the aggregate Rune depth of all pools.
	TotalValuePooled string `json:"totalValuePooled"`
}

// Transaction data
type Transaction struct {

	// Sender address
	Address string `json:"address"`
	Coins   Coins  `json:"coins"`

	// Transaction id hash. Some transactions (such as outbound transactions made in the
	// native asset) may have a zero value.
	TxID string `json:"txID"`
}

// WithdrawMetadata defines model for WithdrawMetadata.
type WithdrawMetadata struct {

	// Decimal (-1.0 <=> 1.0), indicates how assymetrical the withdrawal was. 0 means
	// totally symetrical
	Asymmetry string `json:"asymmetry"`

	// Int64 (Basis points, 0-10000, where 10000=100%), percentage of total pool ownership
	// withdrawn
	BasisPoints string `json:"basisPoints"`

	// Int64, additional Rune payed out because of impermanent loss protection
	ImpermanentLossProtection string `json:"impermanentLossProtection"`

	// Int64, amount of liquidity units removed from the member as result of the withdrawal
	LiquidityUnits string `json:"liquidityUnits"`

	// List of network fees associated to an action. One network fee is charged for each
	// outbound transaction
	NetworkFees NetworkFees `json:"networkFees"`
}

// ActionsResponse defines model for ActionsResponse.
type ActionsResponse struct {
	Actions []Action `json:"actions"`

	// Int64, number of results matching the given filters.
	Count string `json:"count"`
}

// BalanceResponse defines model for BalanceResponse.
type BalanceResponse Balance

// ConstantsResponse defines model for ConstantsResponse.
type ConstantsResponse Constants

// DepthHistoryResponse defines model for DepthHistoryResponse.
type DepthHistoryResponse DepthHistory

// EarningsHistoryResponse defines model for EarningsHistoryResponse.
type EarningsHistoryResponse EarningsHistory

// HealthResponse defines model for HealthResponse.
type HealthResponse Health

// InboundAddressesResponse defines model for InboundAddressesResponse.
type InboundAddressesResponse InboundAddresses

// LastblockResponse defines model for LastblockResponse.
type LastblockResponse Lastblock

// LiquidityHistoryResponse defines model for LiquidityHistoryResponse.
type LiquidityHistoryResponse LiquidityHistory

// MemberDetailsResponse defines model for MemberDetailsResponse.
type MemberDetailsResponse MemberDetails

// MembersResponse defines model for MembersResponse.
type MembersResponse Members

// NetworkResponse defines model for NetworkResponse.
type NetworkResponse Network

// NodesResponse defines model for NodesResponse.
type NodesResponse Nodes

// PoolResponse defines model for PoolResponse.
type PoolResponse PoolDetail

// PoolStatsResponse defines model for PoolStatsResponse.
type PoolStatsResponse PoolStatsDetail

// PoolsResponse defines model for PoolsResponse.
type PoolsResponse PoolDetails

// ProxiedNodesResponse defines model for ProxiedNodesResponse.
type ProxiedNodesResponse ProxiedNodes

// QueueResponse defines model for QueueResponse.
type QueueResponse Queue

// ReverseTHORNameResponse defines model for ReverseTHORNameResponse.
type ReverseTHORNameResponse ReverseTHORNames

// StatsResponse defines model for StatsResponse.
type StatsResponse StatsData

// SwapHistoryResponse defines model for SwapHistoryResponse.
type SwapHistoryResponse SwapHistory

// THORNameDetailsResponse defines model for THORNameDetailsResponse.
type THORNameDetailsResponse THORNameDetails

// TVLHistoryResponse defines model for TVLHistoryResponse.
type TVLHistoryResponse TVLHistory

// GetActionsParams defines parameters for GetActions.
type GetActionsParams struct {

	// Comma separated list. Address of sender or recipient of any in/out transaction related
	// to the action.
	Address *string `json:"address,omitempty"`

	// ID of any in/out tx related to the action
	Txid *string `json:"txid,omitempty"`

	// Any asset that is part of the action (CHAIN.SYMBOL)
	Asset *string `json:"asset,omitempty"`

	// One or more comma separated unique types of action
	// (swap, addLiquidity, withdraw, donate, refund, switch)
	Type *string `json:"type,omitempty"`

	// Affiliate address of the action (swap)
	AffiliateAddress *string `json:"affiliate_address,omitempty"`

	// number of actions returned, default is 50
	Limit *int64 `json:"limit,omitempty"`

	// pagination offset, default is 0
	Offset *int64 `json:"offset,omitempty"`
}

// GetDepthHistoryParams defines parameters for GetDepthHistory.
type GetDepthHistoryParams struct {

	// Interval of calculations
	Interval *GetDepthHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetDepthHistoryParamsInterval defines parameters for GetDepthHistory.
type GetDepthHistoryParamsInterval string

// GetEarningsHistoryParams defines parameters for GetEarningsHistory.
type GetEarningsHistoryParams struct {

	// Interval of calculations
	Interval *GetEarningsHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetEarningsHistoryParamsInterval defines parameters for GetEarningsHistory.
type GetEarningsHistoryParamsInterval string

// GetLiquidityHistoryParams defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParams struct {

	// Return stats for given pool. Returns sum of all pools if missing
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetLiquidityHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400]
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetLiquidityHistoryParamsInterval defines parameters for GetLiquidityHistory.
type GetLiquidityHistoryParamsInterval string

// GetSwapHistoryParams defines parameters for GetSwapHistory.
type GetSwapHistoryParams struct {

	// Return history given pool. Returns sum of all pools if missing.
	Pool *string `json:"pool,omitempty"`

	// Interval of calculations
	Interval *GetSwapHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetSwapHistoryParamsInterval defines parameters for GetSwapHistory.
type GetSwapHistoryParamsInterval string

// GetTVLHistoryParams defines parameters for GetTVLHistory.
type GetTVLHistoryParams struct {

	// Interval of calculations
	Interval *GetTVLHistoryParamsInterval `json:"interval,omitempty"`

	// Number of intervals to return. Should be between [1..400].
	Count *int `json:"count,omitempty"`

	// End time of the query as unix timestamp. If only count is given, defaults to now.
	To *int64 `json:"to,omitempty"`

	// Start time of the query as unix timestamp
	From *int64 `json:"from,omitempty"`
}

// GetTVLHistoryParamsInterval defines parameters for GetTVLHistory.
type GetTVLHistoryParamsInterval string

// GetMembersAdressesParams defines parameters for GetMembersAdresses.
type GetMembersAdressesParams struct {

	// Return only members present in the pool.
	Pool *string `json:"pool,omitempty"`
}

// GetPoolStatsParams defines parameters for GetPoolStats.
type GetPoolStatsParams struct {

	// Restricts aggregation type fields to the last period only.
	// Default is 30d.
	Period *GetPoolStatsParamsPeriod `json:"period,omitempty"`
}

// GetPoolStatsParamsPeriod defines parameters for GetPoolStats.
type GetPoolStatsParamsPeriod string

// GetPoolsParams defines parameters for GetPools.
type GetPoolsParams struct {

	// Filter for only pools with this status
	Status *GetPoolsParamsStatus `json:"status,omitempty"`
}

// GetPoolsParamsStatus defines parameters for GetPools.
type GetPoolsParamsStatus string

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.Swagger, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewSwaggerLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.SwaggerLoader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadSwaggerFromData(specData)
	if err != nil {
		return
	}
	return
}
